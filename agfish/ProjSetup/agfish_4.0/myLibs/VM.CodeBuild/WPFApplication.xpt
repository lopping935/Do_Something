<?xml version="1.0"?>
<Template originator = "Mathias Simmack" created = "26/10/2005">
	
	<!-- Template Header -->
	<TemplateConfiguration>
		<Name>${res:Templates.Project.WinFXApplication.Name}</Name>
		<Category>C#</Category>
		<Subcategory>WPF</Subcategory>
		<Icon>C#.Project.WPFProject</Icon>
		<Description>${res:Templates.Project.WinFXApplication.Description}</Description>
		<SupportedTargetFrameworks>v3.0;v3.5Client</SupportedTargetFrameworks>
	</TemplateConfiguration>
	
	<!-- Actions -->
	<Actions>
	    <CopyDir name="..\Environment" src="..\..\..\Drivers"/>
		<CopyDir name="..\Public_Release" src="ExternFiles"/>
	
		<CopyDir name="..\Public_Release\myLibs" src="..\..\myLibs">
		    <ExcludeDir src="..\..\myLibs\Apps.Core"/>
		    <ExcludeDir src="..\..\myLibs\Com.XmlParser"/>
			<ExcludeDir src="..\..\myLibs\Config"/>
			<ExcludeDir src="..\..\myLibs\FrontedUI"/>
			<ExcludeDir src="..\..\myLibs\FrontendUI.WPF"/>
			<ExcludeDir src="..\..\myLibs\GlobalToolResource"/>
			<ExcludeDir src="..\..\myLibs\Hik.VM.CommonLib"/>
			<ExcludeDir src="..\..\myLibs\Newtonsoft.Json"/>
			<ExcludeDir src="..\..\myLibs\VM.CodeBuild"/>
			<ExcludeDir src="..\..\myLibs\zh-Hans"/>
			<ExcludeFile src="..\..\myLibs\Librarys.Config"/>
		</CopyDir>
		
		<CopyDir name="..\Public_Release\myLibs\FrontendUI.WPF\Config" src="..\..\myLibs\FrontendUI.WPF\Config">
		</CopyDir>		
		<CopyFile name="..\Public_Release\myLibs\Newtonsoft.Json.dll"  src="..\Newtonsoft.Json\Newtonsoft.Json.dll"/>
				
		<CopyDir name="..\Public_Release\VmModuleProxy" src="..\..\VmModuleProxy">
		    <ExcludeDir src="..\..\VmModuleProxy\MvSdkLog"/>
		    <ExcludeDir src="..\..\VmModuleProxy\x86"/>
			<ExcludeDir src="..\..\VmModuleProxy\x64\LoadSolutionFile"/>
		    <ExcludeDir src="..\..\VmModuleProxy\x64\SaveSolutionFile"/>
			<ExcludeDir src="..\..\VmModuleProxy\x64\SolutionFile"/>
		</CopyDir>	
		<CopyDir name="..\Public_Release\Server" src="..\..\Server">
            <ExcludeDir src="..\..\Server\Solution"/>		
		</CopyDir>	
		<CopyDir name="..\Public_Release\PublicFile" src="..\..\PublicFile">	
		    <ExcludeDir src="..\..\PublicFile\x86"/>
		</CopyDir>	
		<CopyDir name="..\Public_Release\GlobalScript" src="..\..\GlobalScript">
		    <ExcludeDir src="..\..\GlobalScript\Samples"/>		
		</CopyDir>	
		<CopyDir name="..\Public_Release\ColorStyle" src="..\..\ColorStyle"/>
		<CopyDir name="..\Public_Release\LangCFG" src="..\..\LangCFG"/>
		
		<CopyFile name="..\Public_Release\3rdLib\Log4Net\log4Net.config" src="..\..\3rdLib\Log4Net\log4Net.config"/>	
		<CopyFile name="..\Public_Release\Lang\zh-cn.xaml" src="..\..\Lang\zh-cn.xaml"/>
        <CopyFile name="..\Public_Release\Lang\en-us.xaml" src="..\..\Lang\en-us.xaml"/>			
		
		<CopyFile name="..\Public_Release\Apps.Style.dll" src="..\Apps.Style.dll"/>		
		<CopyFile name="..\Public_Release\VM.Core.dll"  src="..\VM.Core.dll"/>
		<CopyFile name="..\Public_Release\VMControls.RenderInterface.dll"  src="..\VMControls.RenderInterface.dll"/>
		
		<CopyDir name="..\Public_Release\3rdLib\MsgPack" src="..\..\3rdLib\MsgPack"/>	
		<CopyDir name="..\Public_Release\3rdLib\ICSharpCode" src="..\..\3rdLib\ICSharpCode"/>		
		<CopyDir name="..\Public_Release\3rdLib\MVVM" src="..\..\3rdLib\MVVM"/>
		<CopyDir name="..\Public_Release\3rdLib\OpenCv" src="..\..\3rdLib\OpenCv"/>  		
	  
	    <CopyFile name="..\Public_Release\Frontend.Base.dll" src="..\Frontend.Base.dll"/>
	    <CopyFile name="..\Public_Release\FrontendUI.WPF.dll" src="..\FrontendUI.WPF.dll"/>	
		
		<CopyFile name="..\Public_Release\ICSharpCode.WpfDesign.XamlDom.dll" src="..\..\3rdLib\ICSharpCode\ICSharpCode.WpfDesign.XamlDom.dll"/>
		<CopyFile name="..\Public_Release\ICSharpCode.WpfDesign.Designer.dll" src="..\..\3rdLib\ICSharpCode\ICSharpCode.WpfDesign.Designer.dll"/>
		
		<CopyDir name="..\Public_Release\Module(sp)\x64\Global\GlobalCameraModule" src="..\..\Module(sp)\x64\Global\GlobalCameraModule"/>
		<CopyDir name="..\Public_Release\Module(sp)\x64\Global\CommManagerModule" src="..\..\Module(sp)\x64\Global\CommManagerModule"/>
		<CopyDir name="..\Public_Release\Module(sp)\x64\Global\GlobalTriggerModule" src="..\..\Module(sp)\x64\Global\GlobalTriggerModule"/>
		<CopyDir name="..\Public_Release\Module(sp)\x64\Global\GlobalVariableModule" src="..\..\Module(sp)\x64\Global\GlobalVariableModule"/>
		<CopyDir name="..\Public_Release\Module(sp)\x64\Global\LightControl" src="..\..\Module(sp)\x64\Global\LightControl"/>
		<CopyDir name="..\Public_Release\Module(sp)\x64\.CommonControl" src="..\..\Module(sp)\x64\.CommonControl"/>

		<CopyDir name="..\Public_Release\GateWay" src="..\..\GateWay"/>
		
		<CopyFile name="..\Public_Release\iMVS-6000PlatformSDK.dll"  src="..\..\PublicFile\x64\iMVS-6000PlatformSDK.dll"/>
		<CopyFile name="..\Public_Release\my_cross_platform.dll"  src="..\..\PublicFile\x64\my_cross_platform.dll"/>
		<CopyFile name="..\Public_Release\SMQComm.dll"  src="..\..\SMQComm.dll"/>
	    <CopyFile name="..\Public_Release\PasswordWindowUI.dll" src="..\PasswordWindowUI.dll"/>
		
		<CopyFile name="..\Public_Release\Module(sp)\Combination.xml" src="..\..\Module(sp)\Combination.xml"/>
		<CopyFile name="..\Public_Release\Module(sp)\Display.xml" src="..\..\Module(sp)\Display.xml"/>
		<CopyFile name="..\Public_Release\Module(sp)\Group.xml" src="..\..\Module(sp)\Group.xml"/>
		<CopyFile name="..\Public_Release\Module(sp)\ShapePropertyConfig.xml" src="..\..\Module(sp)\ShapePropertyConfig.xml"/>
		
	</Actions>
	
	<Project language = "C#">
		<ProjectItems>
		    
			<Reference Include="Apps.UIHelper, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\Apps.UIHelper.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			<Reference Include="Apps.XmlParser, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\Apps.XmlParser.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			<Reference Include="Apps.Interface, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\Apps.Interface.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			<Reference Include="Apps.PcUI, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\Apps.PcUI.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			<Reference Include="VMControls.Interface, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\VMControls.Interface.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			
			<Reference Include="VM.Core, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\VM.Core.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			
			<Reference Include="VM.PlatformSDKCS, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\VM.PlatformSDKCS.dll</HintPath>
			  <Private>False</Private>
			</Reference>
		     
	
			<Reference Include="Apps.Data, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\Apps.Data.dll</HintPath>
			  <Private>False</Private>
			</Reference>

			<Reference Include="Apps.Localization, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\Apps.Localization.dll</HintPath>
			  <Private>False</Private>
			</Reference>
		
		    <Reference Include="FrontendUI.WPF, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\FrontendUI.WPF.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			<Reference Include="ICSharpCode.WpfDesign.XamlDom, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\ICSharpCode.WpfDesign.XamlDom.dll</HintPath>
			  <Private>False</Private>
			</Reference>
		
			<Reference Include="VM.Xml, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\VM.Xml.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			<Reference Include="VM.Compress, Version=1.0.7116.34231, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\VM.Compress.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			<Reference Include="VM.Controls, Version=1.0.0.0, Culture=neutral, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\myLibs\VM.Controls.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			
			<Reference Include="VM.Util">
			  <HintPath>..\Public_Release\myLibs\VM.Util.dll</HintPath>
			  <Private>False</Private>
			</Reference>
            <Reference Include="VM.Utility">
			  <HintPath>..\Public_Release\myLibs\VM.Utility.dll</HintPath>
			  <Private>False</Private>
			</Reference>	
            <Reference Include="VM.PcUI">
			  <HintPath>..\Public_Release\myLibs\VM.PcUI.dll</HintPath>
			  <Private>False</Private>
			</Reference>
            <Reference Include="VMControls.WPF.Release">
			  <HintPath>..\Public_Release\myLibs\VMControls.WPF.Release.dll</HintPath>
			  <Private>False</Private>
			</Reference>			
			<Reference Include="iMVS-6000PlatformSDKCS">
			  <HintPath>..\Public_Release\PublicFile\x64\iMVS-6000PlatformSDKCS.dll</HintPath>
			  <Private>False</Private>
			</Reference>
			<Reference Include="log4net, Version=1.2.15.0, Culture=neutral, PublicKeyToken=669e0ddf0bb1aa2a, processorArchitecture=MSIL">
			  <SpecificVersion>False</SpecificVersion>
			  <HintPath>..\Public_Release\log4net.dll</HintPath>
			  <Private>False</Private>
			</Reference>			
			<Reference Include="System" />
			<Reference Include="System.Data" />
			<Reference Include="System.Drawing" />
			<Reference Include="System.Windows.Forms" />
			<Reference Include="System.Xml" />
			<Reference Include="PresentationCore">
				<RequiredTargetFramework>3.0</RequiredTargetFramework>
			</Reference>
			<Reference Include="PresentationFramework">
				<RequiredTargetFramework>3.0</RequiredTargetFramework>
			</Reference>
			<Reference Include="WindowsBase">
				<RequiredTargetFramework>3.0</RequiredTargetFramework>
			</Reference>
			<Reference Include="WindowsFormsIntegration" />
		</ProjectItems>
		
		<PropertyGroup>
			<OutputType>WinExe</OutputType>
			<AppDesignerFolder>Properties</AppDesignerFolder>			
		</PropertyGroup>
		
		<Files>
			<File name="App.xaml" buildAction="ApplicationDefinition" language="XML"><![CDATA[<Application x:Class="${StandardNamespace}.App"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	StartupUri="MainWindow.xaml">
	<Application.Resources>
		 
	</Application.Resources>
</Application>]]></File>
			<File name="App.xaml.cs" SubType="Code" DependentUpon="App.xaml"><![CDATA[using System;
using System.Windows;
using System.Data;
using System.Xml;
using System.Configuration;
using Apps.Localization;
using System.Globalization;

namespace ${StandardNamespace}
{
	/// <summary>
	/// Interaction logic for App.xaml
	/// </summary>
	public partial class App : Application
	{

	}
}]]></File>
			<File name="MainWindow.xaml" buildAction="Page" language="XML"><![CDATA[${MainWindow0_Xaml_Part0}]]></File>
			<File name="MainWindow.xaml.cs" SubType="Code" DependentUpon="MainWindow.xaml"><![CDATA[${StandardHeader.C#}
using VM.Core;
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using Apps.PcUI.Controls;
using VM.PlatformSDKCS;
using System.Text;

namespace ${StandardNamespace}
{
    /// <summary>
    /// MainWindow.xaml
    /// </summary>
    public partial class MainWindow
    {
	    public object LoadSolutionDataContext
        {
            get 
            {
                return PlatformSDKManager.CreateInstance();
            }
        }
        #region Const

		public const string strSolutionFolder = "Solution";

		#endregion

		#region variable

		private string strSolutionName = "release.sol";

		#endregion
	
        public MainWindow()
        {
			CheckPlatformSDKCS();
			
            InitializeComponent();
			
			ProgressMask progressMask = new ProgressMask(){ Name= "windowShadow"};

            progressMask.SetBinding(DataContextProperty, new Binding("LoadSolutionDataContext") { ElementName = "PlatformSDKForm" });
            progressMask.SetBinding(VisibilityProperty, new Binding("IsShow") { Converter = new BooleanToVisibilityConverter() });
            progressMask.SetBinding(ProgressMask.ValueProperty, new Binding("ProgressValue"));
            progressMask.SetBinding(ProgressMask.MessageProperty, new Binding("ProgressMessage"));
            progressMask.SetBinding(ProgressMask.IsShowProgressBarProperty, new Binding("IsShowProgressBar"));

            rootElement.Children.Add(progressMask);
			InitLang();
            //方案加载开始
            ServerSDKManager.serverSDKManager.mSolutionManager.OnSolutionLoadBeginCallBack += MSolutionManager_OnSolutionLoadBeginCallBack;
            //方案加载结束
            ServerSDKManager.serverSDKManager.mSolutionManager.OnSolutionLoadEndCallBack += MSolutionManager_OnSolutionLoadEndCallBack;
            //代理崩溃
            ServerSDKManager.serverSDKManager.mSolutionManager.OnProxyCrashNotice += MSolutionManager_OnProxyCrashNotice;
        }
		
        private void MSolutionManager_OnProxyCrashNotice(ImvsSdkDefine.IMVS_PROXY_CRASH_SP_INFO proxyCrashInfo)
        {         
            var status = (int)proxyCrashInfo.nHasSolStatu; 
            Dispatcher.BeginInvoke(new Action(() =>
            {
                MessageBox.Show("ProxyCrash!");
                if (status == 0)//不存在，直接清空方案
                {}
                else if (status == 1)//存在方案
                {}
            }));
        }

        private void MSolutionManager_OnSolutionLoadBeginCallBack(ImvsSdkDefine.IMVS_SOLUTION_LOAD_BEGEIN_INFO solutionLoadBeginInfo)
        {
            PlatformSDKManager.CreateInstance().IsShow = true;
            PlatformSDKManager.CreateInstance().ProgressMessage = "Loading...";
        }
		
        private void MSolutionManager_OnSolutionLoadEndCallBack(ImvsSdkDefine.IMVS_SOLUTION_LOAD_END_INFO solutionLoadEndInfo)
        {
            Dispatcher.BeginInvoke(new Action(() =>
            {
${MainWindow_CS_Part1}

                MessageBox.Show("Loading is complete！");
            }));
            PlatformSDKManager.CreateInstance().IsShow = false;
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
			LoadSolution();
        }
        private async void LoadSolution()
        {
            string strSolutionPath = Path.Combine(Path.GetDirectoryName(typeof(MainWindow).Assembly.Location) + "\\" + strSolutionFolder + "\\", strSolutionName);
            await PlatformSDKManager.CreateInstance().LoadSolution(strSolutionPath);
        }


        bool isShutDown = false;
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (!isShutDown)
            {
                try
			    {
					e.Cancel = true;               
					if (MessageBox.Show("Confirm to close the window?", "Close", MessageBoxButton.OKCancel, MessageBoxImage.Question) != MessageBoxResult.OK)
					{
						return;
					}
					if (NeedShowSaveNotice())
					{
						string strSolutionPath = Path.Combine(Path.GetDirectoryName(typeof(MainWindow).Assembly.Location) + "\\" + strSolutionFolder + "\\", strSolutionName);

						PlatformSDKManager.CreateInstance().SaveSolution(strSolutionPath);
						ShutDown();
					}
					else
					{
						ShutDown();
					}
				}
				catch
				{ }
            }
        }
        private bool NeedShowSaveNotice()
        {
            bool isSaveNotice = false;
            try
            {
                isSaveNotice = ServerSDKManager.serverSDKManager.mSolutionManager.IsSolModifyInfo();
            }
            catch
            {}
            return isSaveNotice;
        }
		internal void ShutDown()
        {
            PlatformSDKManager.CreateInstance().DestoryHandle(new Action(() =>
            {
                Dispatcher.Invoke(() =>
                {
                    isShutDown = true;
                    Close();
                });
            }));
        }
		private static VM.PlatformSDKCS.VmException GetVmException(Exception ex)
        {
            VM.PlatformSDKCS.VmException vmException = null;
            while (ex != null)
            {
                if (ex is VM.PlatformSDKCS.VmException)
                {
                    vmException = (VM.PlatformSDKCS.VmException)ex;
                    break;
                }
                else
                {
                    ex = ex.InnerException;
                }
            }
            return vmException;
        }
		
		/// <summary>
        /// 模拟触发PlatformSDKCS-Init
        /// 校验所需环境是否正常
        /// </summary>
        private void CheckPlatformSDKCS()
        {
            try
            {
                var initPSDK = VM.PlatformSDKCS.ServerSDKManager.serverSDKManager;
            }
            catch (Exception ex)
            {
                string strMsg;
                VM.PlatformSDKCS.VmException vmEx = GetVmException(ex);
                if (null != vmEx)
                {
                    if (vmEx.errorCode == unchecked((int)0xE0000700))
                    {
                        strMsg = ("Encryption dog or detect abnormal not detected,  shut down later!");
                    }
                    else
                    {
                        strMsg = "Init failed. Error Code: " + Convert.ToString(vmEx.errorCode, 16);
                    }
                }
                else
                {
                    strMsg = "IMVS_PF_CreateHandle_CS Failed. : " + ex.Message;
                }
                MessageBox.Show(strMsg);
                isShutDown = true;
                App.Current.MainWindow.Close();
                Environment.Exit(0);
            }
        }
		
		/// <summary>
        /// 初始化语言
        /// </summary>
        private static void InitLang()
        {
            try
            {
                string langSet = Apps.Localization.AppLocalizationService.GetLangParm();
                var info = System.Globalization.CultureInfo.GetCultureInfo(langSet);
                Apps.Localization.AppLocalizationService.CurLanguageDefine = info;
            }
            catch
            {
                MessageBox.Show("InitLang Failed.");
            }
        }

${MainWindow_CS_Part0}
    }
}
]]>
			</File>
			<File name="PlatformSDKManager.cs" SubType="Code"><![CDATA[${StandardHeader.C#}
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VM.Core;
using VM.PlatformSDKCS;

namespace ${StandardNamespace}
{
    public class PlatformSDKManager : INotifyPropertyChanged
    {
        #region PropertyChanged
        public event PropertyChangedEventHandler PropertyChanged;
        public void OnPropertyChanged(string name)
        {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null)
            {
                handler(this, new PropertyChangedEventArgs(name));
            }
        }
        #endregion
        #region
        private static PlatformSDKManager _PlatformSDKManager = null;
        static PlatformSDKManager()
        {
            _PlatformSDKManager = new PlatformSDKManager();
        }
        public static PlatformSDKManager CreateInstance()
        {
            return _PlatformSDKManager;
        }
        #endregion
        #region Property

        public int _ProgressValue;
        public int ProgressValue
        {
            get
            {
                return _ProgressValue;
            }
            set
            {
                if (_ProgressValue != value)
                {
                    _ProgressValue = value;
                    OnPropertyChanged("ProgressValue");
                }
            }
        }


        public bool _IsShowProgressBar;
        public bool IsShowProgressBar
        {
            get
            {
                return _IsShowProgressBar;
            }
            set
            {
                if (_IsShowProgressBar != value)
                {
                    _IsShowProgressBar = value;
                    OnPropertyChanged("IsShowProgressBar");
                }
            }
        }

        public bool _IsShow;
        public bool IsShow
        {
            get
            {
                return _IsShow;
            }
            set
            {
                if (_IsShow != value)
                {
                    _IsShow = value;
                    OnPropertyChanged("IsShow");
                }
            }
        }

        public string _ProgressMessage;
        public string ProgressMessage
        {
            get
            {
                return _ProgressMessage;
            }
            set
            {
                if (_ProgressMessage != value)
                {
                    _ProgressMessage = value;
                    OnPropertyChanged("ProgressMessage");
                }
            }
        }

        #endregion

        #region
        public Task LoadSolution(string path)
        {
            return Task.Factory.StartNew(delegate
            {
                App.Current.Dispatcher.BeginInvoke(new Action(() =>
                {
                    VmSolution.Import(path);
                }));
            });
        }

        public void SaveSolution(string path)
        {
            try
            {
                IsShow = true;
                ProgressMessage = "Save Solution";
                Console.WriteLine(System.DateTime.Now);
                VmSolution.Export(path);
                Console.WriteLine(System.DateTime.Now);
                IsShow = false;
            }
            catch (VmException ex)
            { 
            
            }
        }
        public void DestoryHandle(Action fun = null)
        {
            IsShow = true;
            ProgressMessage = "Close";
            AsyncDestroyHandle(fun);
        }
        private async void AsyncDestroyHandle(Action fun)
        {
            Task deInitTask = Task.Factory.StartNew(delegate
            {
                
                ServerSDKManager.serverSDKManager.mVmInterfaceManager.DestoryHandle(ImvsSdkDefine.IMVS_CLIENT_TAKE_OVER_STATE_NOT_NEED);
                
                if (fun != null)
                {
                    fun();
                }
            });
            await deInitTask;
            IsShow = false;
        }

        #endregion

    }
}
]]></File>
			<File name="Properties\WPFAssemblyInfo.cs" src="WPFAssemblyInfo.cs" />
			<File name="Properties\AssemblyInfo.cs" src="DefaultAssemblyInfo.cs" />
		</Files>
	</Project>
</Template>
